#!/bin/sh /etc/rc.common

# Define the start sequence order (this is where you control the startup order)
START=99

start() {
#################################################    # 添加 sleep 延时，等待 10 秒

#!/bin/bash

# 设置记录上次执行时间的文件
last_run_file="/tmp/script_last_run_time"

# 获取当前时间戳
current_time=$(date +%s)

# 检查文件是否存在并读取上次执行时间
if [ -f "$last_run_file" ]; then
    last_run_time=$(cat "$last_run_file")
else
    last_run_time=0  # 如果没有记录，则视为从未执行过
fi

# 计算时间差（单位：秒）
time_diff=$((current_time - last_run_time))

# 输出调试信息，确保时间计算正确
echo "当前时间：$current_time"
echo "上次执行时间：$last_run_time"
echo "时间差：$time_diff 秒"

# 如果上次执行时间在 1s 内，则跳过重命名
if [ $time_diff -le 1 ]; then
    echo "上次执行时间距离现在不足 1s，开始重命名操作。"

    # 函数：处理目录中的文件
    process_files_in_dir() {
        local dir="$1"  # 目录路径
        echo "处理目录：$dir"

        # 遍历目录中的文件
        for file in "$dir"*; do
            # 判断文件名是否包含 luci-base、TEST0、TEST1 或 TEST2
            if [[ "$file" == *luci-base* || "$file" == *yacd* || "$file" == *TEST1* || "$file" == *TEST2* ]]; then
                echo "跳过文件: $file (包含 luci-base, TEST0, TEST1 或 TEST2)"
                continue
            fi

            # 如果文件名以 .bak 结尾
            if [[ "$file" == *.bak ]]; then
                # 去掉 .bak 后缀
                mv "$file" "${file%.bak}"
                echo "去掉后缀: $file -> ${file%.bak}"
            else
                # 给文件添加 .bak 后缀
                mv "$file" "$file.bak"
                echo "添加后缀: $file -> $file.bak"
            fi
        done
    }

    # 定义需要监控的目录
    controller_dir="/usr/lib/lua/luci/controller/"
    menu_dir="/usr/share/luci/menu.d/"

    # 检查并处理 controller_dir 目录
    if [ -d "$controller_dir" ]; then
        process_files_in_dir "$controller_dir"
    else
        echo "目录不存在: $controller_dir"
    fi

    # 检查并处理 menu_dir 目录
    if [ -d "$menu_dir" ]; then
        process_files_in_dir "$menu_dir"
    else
        echo "目录不存在: $menu_dir"
    fi

else
    echo "上次执行时间已超过 1 分钟，跳过重命名操作。"

fi

# 记录当前时间
echo "$current_time" > "$last_run_file"

exit 0    
###########################################################3
# sleep 10

    # 检查镜像是否存在
    if ! docker images | grep -q "tindy2013/subconverter"; then
        # 如果镜像不存在则加载
        docker load -i /etc/docker-img/subconverter.tar
    fi

    # 检查容器是否存在
    if ! docker ps -a | grep -q "subconverter"; then
        # 启动容器
        docker run -d \
            --name subconverter \
            --restart=always \
            -p 25500:25500 \
            tindy2013/subconverter:latest
    fi
}

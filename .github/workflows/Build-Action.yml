name: Build ImmortalWRT Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check Server Performance
      run: |
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT 
    
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      #if: false  # 跳过该步骤
      #if: true  # 该步骤会执行
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Show disk space
      run: |
        echo "Show disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Download Docker image
      run: |
        tag=$(curl -s https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/releases/latest | jq -r '.tag_name')
        echo "下载的 tag: $tag"
        curl -s https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/releases/latest \
         | jq -r '.assets[].browser_download_url' \
         | xargs -n 1 wget

    - name: Extract Docker image
      run: |
        7z x pre-immortalwrt-build-docker.tar.gz.7z.001 -o./
        rm pre-immortalwrt-build-docker.tar.gz.7z.*
        sudo docker load < pre-immortalwrt-build-docker.tar.gz
        rm pre-immortalwrt-build-docker.tar.gz

    - name: Run Docker container
      run: |
        sudo docker run -d --name pre-immortalwrt-build-docker pre-immortalwrt-build-docker tail -f /dev/null

    - name: Execute commands inside Docker container
      run: |
        sudo docker exec -u user -w /home/user/openwrt pre-immortalwrt-build-docker bash -c "
          echo '+++++++++++++++++++++++++++'
          echo '当前目录为：'
          pwd
          echo '目录下文件：'
          ls
          echo '+++++++++++++++++++++++++++'
          
          git pull
          
          git clone --depth=1 https://github.com/sirpdboy/luci-app-lucky.git package/lucky
          
          ./scripts/feeds update -a && ./scripts/feeds install -a
          
          make defconfig
          make download -j8
          make -j$(nproc) || make -j1 V=s
        "

    - name: Move compiled files to host machine
      run: |
        sudo docker exec pre-immortalwrt-build-docker bash -c "
          find /home/user/openwrt/bin/targets -type f \
          \( -name '*immortalwrt*' -o \
          -name '*config*' \)" \
        | while read file; do \
          sudo docker cp pre-immortalwrt-build-docker:$file /openwrt/$(basename $file); \
        done

    - name: Upload compiled files to GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: /openwrt/*
        tag: ${{ github.ref }}

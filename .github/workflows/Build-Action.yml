name: Build ImmortalWRT Docker In Dcoker

on:
  # 手动触发
  workflow_dispatch:

  # 定时触发 (例如每天凌晨 1 点触发)
#  schedule:
#    - cron: '0 1 * * *'  # 每天凌晨 1 点 UTC，按需求调整时间

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check Server Performance
      run: |
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT 
    
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      #if: false  # 跳过该步骤
      #if: true  # 该步骤会执行
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Show disk space
      run: |
        echo "Show disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Download Docker image
      run: |
        tag=$(curl -s https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/releases/latest | jq -r '.tag_name')
        echo "下载的 tag: $tag"
        curl -s https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/releases/latest \
         | jq -r '.assets[].browser_download_url' \
         | xargs -n 1 wget

    - name: Extract Docker image
      run: |
        7z x immortalwrt-build-docker.tar.gz.7z.001 -o./
        rm immortalwrt-build-docker.tar.gz.7z.*
        sudo docker load < immortalwrt-build-docker.tar.gz
        rm immortalwrt-build-docker.tar.gz

    - name: Run Docker container
      run: |
        sudo docker run -d --name immortalwrt-build-docker immortalwrt-build-docker tail -f /dev/null

    - name: Move Files
      run: |
        mkdir openwrt
# mv files
# mv config
# mv diy.sh
# chmod +x diy.sh
# run diy.sh

    - name: Download package inside Docker container
      run: |
        sudo docker exec -u user -w /home/user/openwrt immortalwrt-build-docker bash -c "
          echo '+++++++++++++++++++++++++++'
          echo '当前目录为：'
          pwd
          echo '目录下文件：'
          ls
          echo '+++++++++++++++++++++++++++'
          
          git pull
          
          git clone --depth=1 https://github.com/sirpdboy/luci-app-lucky.git package/lucky
          
          ./scripts/feeds update -a && ./scripts/feeds install -a
          
          make defconfig
          make download -j8
        "

    - name: Compile the firmware inside Docker container
      run: |
        sudo docker exec -u user -w /home/user/openwrt immortalwrt-build-docker bash -c "
          make -j$(nproc) || make -j1 V=s
        "

    - name: Move compiled files to host machine
      run: |
        sudo docker exec immortalwrt-build-docker bash -c "
          find /home/user/openwrt/bin/targets -type f \
          \( -name '*immortalwrt*' -o \
          -name '*config*' \)" \
        | while read file; do \
          sudo docker cp immortalwrt-build-docker:$file /openwrt/$(basename $file); \
        done

    - name: Create Git tag
      id: create_tag  # 给步骤添加一个 id
      run: |
         TAG_NAME="x86_64_$(date +'%Y.%m.%d-%H_%M')"  # 基于当前年、月、日、小时、分钟生成唯一标签
         echo "TAG_NAME=${TAG_NAME}"  # 显示标签名
         git tag $TAG_NAME  # 创建新的 Git 标签
         git push origin $TAG_NAME  # 推送标签到远程仓库
         git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/superpassby/immortalwrt-build-docker $TAG_NAME  # 使用 PAT 推送标签
         echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV  # 将标签名存储在环境变量中，供后续步骤使用
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Docker parts to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
          tag_name: ${{ env.TAG_NAME }}  # 从环境变量中获取标签名
          files: |
              immortalwrt-build-docker.tar.gz.*
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete old workflow runs
      run: |
        echo "Deleting old workflow runs..."
        WORKFLOW_RUNS=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/immortalwrt-build-docker/actions/runs")
        RUN_IDS=$(echo $WORKFLOW_RUNS | jq '.workflow_runs | sort_by(.created_at) | reverse | .[3:] | .[].id')
        for RUN_ID in $(echo $RUN_IDS); do
          echo "Deleting workflow run: $RUN_ID"
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/immortalwrt-build-docker/actions/runs/$RUN_ID"
        done

    - name: Delete old releases
      run: |
        echo "Deleting old releases..."
        RELEASES=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/immortalwrt-build-docker/releases")
        # 按创建时间排序，并排除最近的三个版本
        RELEASE_IDS=$(echo $RELEASES | jq '. | sort_by(.created_at) | reverse | .[3:] | .[].id')
        for RELEASE_ID in $(echo $RELEASE_IDS); do
          RELEASE_NAME=$(echo $RELEASES | jq -r ".[] | select(.id == $RELEASE_ID) | .name")
          echo "Deleting release: $RELEASE_NAME"
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/immortalwrt-build-docker/releases/$RELEASE_ID"
        done

    - name: Delete old tags
      run: |
        echo "Deleting old tags..."
        TAGS=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/immortalwrt-build-docker/tags")
        # 提取时间戳部分并按日期排序
        TAG_NAMES=$(echo $TAGS | jq -r '.[] | {name: .name, date: (.name | match("[0-9]{4}.[0-9]{2}.[0-9]{2}-[0-9]{2}_[0-9]{2}") | .string)} | select(.date != null) | .name' | sort)
        # 删除排名较老的标签
        TAG_NAMES=$(echo "$TAG_NAMES" | head -n -3)  # 保留最新三个标签
        for TAG_NAME in $(echo "$TAG_NAMES"); do
          echo "Deleting tag: $TAG_NAME"
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/immortalwrt-build-docker/git/refs/tags/$TAG_NAME"
        done



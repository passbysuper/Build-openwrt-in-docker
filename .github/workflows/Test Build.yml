name: Build 

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      run_ssh:
        description: 'Whether to run SSH for make menuconfig'
        required: false
        default: 'false'  # 默认不执行
        type: choice
        options:
          - 'false'
          - 'true'
      download_op_folder:
        description: '是否利用缓存加速下载'
        required: false
        default: 'true'  # 默认不执行
        type: choice
        options:
          - 'true'
          - 'false'

  # 定时触发 (例如每天凌晨 1 点触发)
#  schedule:
#    - cron: '0 1 * * *'  # 每天凌晨 1 点 UTC，按需求调整时间

jobs:
  Get_config_Building:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        version: [immortalwrt, openwrt, lede, lienol]
        #version: [immortalwrt, openwrt]
        #branch: [openwrt-24.10, openwrt-23.10]  # 默认分支
        branch: [openwrt-24.10]
        # 如果 version 为 lede，默认分支将是 main，稍后调整
        platform: [x86_64]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set start time (Asia/Shanghai timezone)
        id: set_time
        run: |
          # 获取当前时间并格式化
          START_TIME_TAG=$(TZ="Asia/Shanghai" date +'%Y.%m.%d-%H_%M')
          START_TIME_RELEASE=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M')
          
          echo "Start time: $START_TIME_TAG"
          
         
          # 将时间设置为环境变量，供后续步骤使用
          echo "START_TIME_TAG=$START_TIME_TAG" >> $GITHUB_ENV
          echo "START_TIME_RELEASE=$START_TIME_RELEASE" >> $GITHUB_ENV
          
        
      - name: Determine branch
        id: set_branch
        run: |
          if [[ "${{ matrix.version }}" == "immortalwrt" || "${{ matrix.version }}" == "openwrt" ]]; then
            echo "branch=${{ matrix.branch }}" >> $GITHUB_ENV
          elif [[ "${{ matrix.version }}" == "lede" ]]; then
            if [[ "${{ matrix.branch }}" == "openwrt-24.10" ]]; then
              echo "branch=master" >> $GITHUB_ENV
            else
              exit 0
            fi
          elif [[ "${{ matrix.version }}" == "lienol" ]]; then
            branch_name=$(echo "${{ matrix.branch }}" | sed 's/^openwrt-//')
            echo "branch=${branch_name}" >> $GITHUB_ENV
          fi
            # 根据不同的版本选择源代码的 URL
          if [ "${{ matrix.version }}" == "immortalwrt" ]; then
            openwrt_source_url="https://github.com/immortalwrt/immortalwrt"
          elif [ "${{ matrix.version }}" == "openwrt" ]; then
            openwrt_source_url="https://github.com/openwrt/openwrt"
          elif [ "${{ matrix.version }}" == "lede" ]; then
            openwrt_source_url="https://github.com/coolsnowwolf/lede"
          elif [ "${{ matrix.version }}" == "lienol" ]; then
            openwrt_source_url="https://github.com/Lienol/openwrt"
          else
             echo "Unknown version: ${{ matrix.version }}" && exit 1
          fi
          echo "openwrt_source_url=$openwrt_source_url" >> $GITHUB_ENV
        
      - name: 查看机器配置  
        run: |  
          echo "警告⚠"  
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"  
          echo -e "CPU性能排序: 7763 > 8370C > 8272CL > 8171M > E5-2673\n"  
          echo "--------------------------CPU信息--------------------------"  
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"  
          echo "CPU核心数量: $(nproc)"  
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"  
          echo "--------------------------内存信息--------------------------"  
          echo "已安装内存详细信息:"  
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"  
          echo "--------------------------硬盘信息--------------------------"  
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT  

      - name: "Optimize Disk Space"
        #if: false  # 跳过该步骤
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.0"
        with:
          operate_sudo: "True"
          general_include: ".+"
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True" 
      
      - name: Show disk space
        run: |
          echo "Show disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
      
      - name: Build Docker image with compile​​ tools
        run: |
          docker build -t ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }} -f ./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/Dockerfile .


      - name: Run Docker container
        run: |
          #sudo docker run -d --name openwrt_build ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }} -v /work:/home/user tail -f /dev/null
          sudo docker run -d --name openwrt_build -v /work:/home/user ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }} tail -f /dev/null

      - name: Download Openwrt Folder
        if: ${{ github.event.inputs.download_op_folder == 'true' }}  # 只有 download_op_folder 为 true 时执行
        run: |
          # 获取所有 releases
          echo "获取所有 release 信息..."
          releases=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases")

          # 显示所有 release 标签，帮助调试
          echo "所有 release 标签："
          echo "$releases" | jq -r '.[].name'

          # 获取所有以 'ENV' 开头的 release 标签，并按发布时间排序获取最新的一个
          release_tag=$(echo "$releases" | jq -r '.[] | select(.name | test("^ENV")) | .name' | sort -r | head -n 1)

          if [ -z "$release_tag" ]; then
            echo "未找到以 'ENV' 开头的 release 标签"
            exit 1
          fi

          echo "找到的最新 ENV 标签 release: $release_tag"

          # 获取该 release 下所有的文件下载链接
          download_urls=$(echo "$releases" | jq -r --arg tag "$release_tag" '.[] | select(.name == $tag) | .assets[].browser_download_url')

          if [ -z "$download_urls" ]; then
            echo "未找到该 release 中的下载链接"
            exit 1
          fi

          # 过滤出符合要求的文件（名称以 openwrt_openwrt-24.10_x86_64 开头）
          echo "开始筛选符合条件的文件..."
          filtered_urls=$(echo "$download_urls" | grep -oP "${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}[^ ]+")

          if [ -z "$filtered_urls" ]; then
            echo "未找到符合条件的文件"
            exit 1
          fi

          # 下载所有筛选出的文件
          echo "开始下载符合条件的文件..."
          echo "$filtered_urls" | xargs -n 1 wget

          echo "下载完成"
          echo "当前目录文件："
          ls -lh 
          echo "+++++++++++++++++++++++++++++++++++++++++++"

      - name: 7z
        if: ${{ github.event.inputs.download_op_folder == 'true' }}  # 只有 download_op_folder 为 true 时执行
        run: |
          sudo 7z x ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}*.7z.001 -o/work/openwrt
          sudo rm ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}*.7z.*
          echo "work目录文件："
          ls /work
          echo "+++++++++++++++++++++++++++++++++++++++++++"


      - name: 如不用现有openwrt文件夹，则下载最新的openwrt
        if: ${{ github.event.inputs.download_op_folder == 'false' }}  # 只有 download_op_folder 为 true 时执行
        run: |
            echo "Cloning OpenWrt repository from ${{ env.openwrt_source_url }}..."
            # 将 /home/user/ 目录下的所有内容的所有者和权限改为 user 用户
            sudo docker exec -u root -w /root openwrt_build chown -R user:user /home/user/
            sudo docker exec -u user -w /home/user openwrt_build bash -c "git clone -b ${{ env.branch }} --single-branch --filter=blob:none ${{ env.openwrt_source_url }} openwrt"

      - name: mv rename
        run: |
          # 替换mv中路径，用以对比新diff文件与仓库文件差异
          sed -i "s/version/${{ matrix.version }}/g" mv
          sed -i "s/branch/${{ env.branch }}/g" mv
          sed -i "s/platform/${{ matrix.platform }}/g" mv
          chmod +x mv
          cat mv

      - name: Move Files
        run: |
          # 将 files、diffconfig、diy. sh复制到 Docker 容器中的 /home/user/openwrt 即 /work/openwrt 下
          sudo cp -r ./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/* /work/openwrt
          
          # 将 ./General_Settings 复制到 Docker 容器中的 /home/user/openwrt 即 /work/openwrt 下
          sudo cp ./General_Settings /work/openwrt

          # 将 /home/user/ 目录下的所有内容的所有者和权限改为 user 用户
          sudo docker exec -u root -w /root openwrt_build chown -R user:user /home/user/

          # 使用ssh修改配置前，按照仓库设置更新.config文件
          sudo docker exec -u user -w /home/user/openwrt openwrt_build bash -c "    
            cp diffconfig .config
            make defconfig
          " || true

      - name: SSH远程连接（点击 "Web shell:" 链接后键入"q"方才显示终端；进入终端后执行："./mv"，所有设置完成后，键入“exit”退出）
        if: ${{ github.event.inputs.run_ssh == 'true' }}  # 只有 run_ssh 为 true 时执行
        uses: mxschmitt/action-tmate@v3

      - name: Commit and push files to the repository
        if: ${{ github.event.inputs.run_ssh == 'true' }}  # 只有 run_ssh 为 true 时执行
        continue-on-error: true  # 设置即使该步骤失败，依然继续执行后续步骤
        run: |         
          echo "新diff文件与仓库文件差异："
          sudo diff -u ./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/diffconfig /work/openwrt/diffconfig || true
         
          # 复制 ssh 中新生成的diffconfig 到仓库的对应目录
          sudo cp /work/openwrt/diffconfig ./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/diffconfig
         
          # 配置 Git 用户
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # 进入仓库的根目录，并确保目标路径下的文件被添加到 Git
          echo "git status"
          git status

          # 添加 diffconfig 文件到暂存区
          git add ./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/diffconfig

          # 取消暂存 'mv' 文件的更改（如果不想提交该文件）
          echo "git restore mv"
          git restore mv

          # 查看当前状态，确保只剩下 'diffconfig' 文件
          echo "git status"
          git status  # 查看当前状态，确保只剩下 'diffconfig' 文件在待提交状态
       
          # 提交更改
          git commit -m "New diffconfig from ssh"

          # 拉取远程最新更改（避免冲突）
          git pull --rebase origin ${{ github.ref }}         

          # 推送到远程仓库
          git push origin ${{ github.ref }}
          
      - name: Download package inside Docker container
        run: |
          sudo docker exec -u user -w /home/user/openwrt openwrt_build bash -c "    
            du -h --max-depth=1 /home/user/openwrt | sort -rh
          " || true        
          sudo docker exec -u user -w /home/user/openwrt openwrt_build bash -c "    
            # 初始化 Git 仓库
            git init
            git remote add origin ${{ env.openwrt_source_url }}
            git fetch
            git pull --depth=1 origin ${{ env.branch }}         
            #git pull
            chmod +x diy.sh && ./diy.sh                
            ./scripts/feeds update -a && ./scripts/feeds install -a     
            cp diffconfig .config
            make defconfig
            make download -j8
          "
   
          # 执行General_Settings，修改自定义设置
          sudo docker exec -u user -w /home/user/openwrt openwrt_build bash -c "chmod +x ./General_Settings || true && ./General_Settings"
     
      - name: Compile the firmware inside Docker container
        run: |
          sudo docker exec -u user -w /home/user/openwrt openwrt_build bash -c "
            make -j$(nproc) || make -j1 V=s
          "

      - name: Move compiled files to host machine
        run: |          
          # 创建 target 目录
          mkdir -p ./target/img || true
          mkdir -p ./target/env || true
          # 从 ./Firmware Selector 文件中提取没有注释的文件名
          files_to_copy=$(grep -v '^#' ./Firmware_Selector)
          # 将文件名去除首尾空格
          files_to_copy=$(echo "$files_to_copy" | sed 's/^[ \t]*//;s/[ \t]*$//')
          # 进入 Docker 容器，找到匹配的文件并复制到本机
          for file in $files_to_copy; do
            # 输出当前要查找的文件名（调试信息）
            echo "正在查找文件: $file"

            # 使用 docker exec 查找文件，支持模糊匹配
            found_files=$(sudo docker exec -u user -w /home/user/openwrt openwrt_build bash -c "
              find /home/user/openwrt/bin/targets -type f -name '*$file*'
            ")

            # 如果找到了匹配的文件，输出并进行复制
            for found_file in $found_files; do
              # 输出每个要复制的文件（调试信息）
              echo "找到文件: $found_file"   
              
              # 复制找到的文件到本机并重命名，添加前缀 "lede_master_x86_64_"
              sudo docker cp openwrt_build:$found_file ./target/img/${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}_$(basename $found_file)
            done
          done
          echo "文件复制完成！"   
          ls ./target/img/     

      - name: Create Git tag
        id: create_tag
        run: |
          # 设置标签名
          TAG_NAME_ENV="ENV：${{ env.START_TIME_TAG }}"
          RELEASE_NAME_ENV="ENV：${{ env.START_TIME_RELEASE }}"

          TAG_NAME_FM="FM：${{ env.START_TIME_TAG }}"
          RELEASE_NAME_FM="Firmware发布时间(UTC+8)：${{ env.START_TIME_RELEASE }}"
          
          # 输出标签名和发布名
          echo "TAG_NAME_ENV=$TAG_NAME_ENV" >> $GITHUB_ENV
          echo "RELEASE_NAME_ENV=$RELEASE_NAME_ENV" >> $GITHUB_ENV
          
          echo "TAG_NAME_FM=$TAG_NAME_FM" >> $GITHUB_ENV
          echo "RELEASE_NAME_FM=$RELEASE_NAME_FM" >> $GITHUB_ENV
          
          # 将标签名和发布名传递给后续步骤
          echo "TAG_NAME_ENV=${TAG_NAME_ENV}" >> $GITHUB_ENV
          echo "RELEASE_NAME_ENV=${RELEASE_NAME_ENV}" >> $GITHUB_ENV   
          
          echo "TAG_NAME_FM=${TAG_NAME_FM}" >> $GITHUB_ENV
          echo "RELEASE_NAME_FM=${RELEASE_NAME_FM}" >> $GITHUB_ENV 

      - name: Set up GitHub Release For Firmware
        id: create_release_for_firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME_FM }}
          name: ${{ env.RELEASE_NAME_FM }}
          files: ./target/img/*  # 递归匹配所有文件
          body: "固件发布"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

      - name: 7z openwrt folder
        run: |          
          # 分卷 压缩 /work/openwrt 文件夹到./target/env，并上传
          #sudo 7z a ./target/env/${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}_openwrt_archive.7z /work/openwrt/* -v2000m
          sudo 7z a -mx=3 ./target/env/${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}_openwrt_archive.7z /work/openwrt/ -v2000m
          #sudo zip -r -s 2000m ./target/env/${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}_openwrt_archive.zip /work/openwrt/

          ls ./target/env/
                  
      - name: Set up GitHub Release
        id: create_release_for_env
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME_ENV }}
          name: ${{ env.RELEASE_NAME_ENV }}
          files: ./target/env/*  # 递归匹配所有文件
          body: "编译目录"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         



name: Get config

on:
  # 手动触发
  workflow_dispatch:

  # 定时触发 (例如每天凌晨 1 点触发)
#  schedule:
#    - cron: '0 1 * * *'  # 每天凌晨 1 点 UTC，按需求调整时间

jobs:
  Get_config:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        #version: version: [immortalwrt, openwrt, lede, Lienol]
        version: [openwrt]
        #branch: [openwrt-24.10, openwrt-23.10]  # 默认分支
        branch: [openwrt-24.10]
        # 如果 version 为 lede，默认分支将是 main，稍后调整
        platform: [x86_64]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

#      - name: Setup Debug Session
#        uses: csexton/debugger-action@master
#        uses: mxschmitt/action-tmate@v3
        
      - name: Determine branch
        id: set_branch
        run: |
          if [[ "${{ matrix.version }}" == "immortalwrt" || "${{ matrix.version }}" == "openwrt" ]]; then
            echo "branch=${{ matrix.branch }}" >> $GITHUB_ENV
          elif [[ "${{ matrix.version }}" == "lede" ]]; then
            if [[ "${{ matrix.branch }}" == "openwrt-24.10" ]]; then
              echo "branch=master" >> $GITHUB_ENV
            else
              exit 0
            fi
          elif [[ "${{ matrix.version }}" == "lienol" ]]; then
            branch_name=$(echo "${{ matrix.branch }}" | sed 's/^openwrt-//')
            echo "branch=${branch_name}" >> $GITHUB_ENV
          fi
        
      - name: 查看机器配置  
        run: |  
          echo "警告⚠"  
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"  
          echo -e "CPU性能排序: 7763 > 8370C > 8272CL > 8171M > E5-2673\n"  
          echo "--------------------------CPU信息--------------------------"  
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"  
          echo "CPU核心数量: $(nproc)"  
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"  
          echo "--------------------------内存信息--------------------------"  
          echo "已安装内存详细信息:"  
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"  
          echo "--------------------------硬盘信息--------------------------"  
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT  

      - name: "Optimize Disk Space"
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.0"
        with:
          operate_sudo: "True"
          general_include: ".+"
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          #apt_prune: "True"
          #apt_clean: "True"
          #homebrew_prune: "True"
          #homebrew_clean: "True"
          #npm_prune: "True"
          #npm_clean: "True"
          #os_swap: "True" 
      
      - name: Show disk space
        run: |
          echo "Show disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
      
      - name: Download Docker image
        run: |
          # 获取最新的 release 的 tag
          tag=$(curl -s https://api.github.com/repos/superpassby/Build-openwrt-in-docker-pre/releases/latest | jq -r '.tag_name')
          echo "下载的 tag: $tag"

          # 获取所有资产的下载链接，并筛选出文件名符合 lienol_24.10_x86_64* 的文件
          curl -s https://api.github.com/repos/superpassby/Build-openwrt-in-docker-pre/releases/latest \
            | jq -r '.assets[].browser_download_url' \
            | grep -E '${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.*' \
            | xargs -n 1 wget


      - name: Extract Docker image
        run: |
          echo "当前目录文件："
          ls -lh 
          echo "+++++++++++++++++++++++++++++++++++++++++++"
          7z x ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz.7z.001 -o./
          rm ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz.7z.*
          sudo docker load < ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz
          rm ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz
          echo "当前目录文件："
          ls -lh 
          echo "+++++++++++++++++++++++++++++++++++++++++++"
          mkdir target
          sed -i "s/version_branch_platform/${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}/g" mv
          chmod +x mv
          cat mv

      - name: Run Docker container
        run: |
          sudo docker run -d --name openwrt_build ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }} tail -f /dev/null

      - name: Move Files
        run: |
          # 创建 openwrt 目录
          mkdir -p target
        
          # 将 x86_64_files 复制到 Docker 容器中的 /home/user/openwrt 并重命名为 files
          # sudo docker cp ./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/files ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}:/home/user/openwrt/files

          # 将 .x86_64_config 复制到 Docker 容器中的 /home/user/openwrt 并重命名为 .config
          # sudo docker cp ./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/.config ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}:/home/user/openwrt/.config

          # 将 x86_64_diy.sh 复制到 Docker 容器中的 /home/user/openwrt 并重命名为 diy.sh
          sudo docker cp ./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/diy.sh ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}:/home/user/openwrt/diy.sh

          # 给 diy.sh 文件添加执行权限
          sudo docker exec ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }} sudo chmod +x /home/user/openwrt/diy.sh


      - name: SSH远程连接（make menuconfig）
        uses: mxschmitt/action-tmate@v3

    
      - name: Upload artifacts
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}_artifacts
          path: |
            ./target/*
          compression-level: 0  # 禁用压缩


